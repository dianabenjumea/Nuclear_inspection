<launch>
<!-- rosbridge setup -->
  <arg name="port" default="9090" />
  <arg name="address" default="" />
  <arg name="ssl" default="false" />
  <arg name="certfile" default=""/>
  <arg name="keyfile" default="" />

  <arg name="retry_startup_delay" default="5" />

  <arg name="fragment_timeout" default="600" />
  <arg name="delay_between_messages" default="0" />
  <arg name="max_message_size" default="None" />
  <arg name="unregister_timeout" default="10" />

  <arg name="authenticate" default="false" />

  <arg name="topics_glob" default="[*]" />
  <arg name="services_glob" default="[*]" />
  <arg name="params_glob" default="[*]" />
  <arg name="bson_only_mode" default="false" />

  <!-- Valid options for binary_encoder are "default", "b64" and "bson". -->
  <arg unless="$(arg bson_only_mode)" name="binary_encoder" default="default"/>

  <group if="$(arg ssl)">
    <node name="rosbridge_websocket" pkg="rosbridge_server" type="rosbridge_websocket" output="screen">
      <param name="certfile" value="$(arg certfile)" />
      <param name="keyfile" value="$(arg keyfile)" />
      <param name="authenticate" value="$(arg authenticate)" />
      <param name="port" value="$(arg port)"/>
      <param name="address" value="$(arg address)"/>
      <param name="retry_startup_delay" value="$(arg retry_startup_delay)"/>
      <param name="fragment_timeout" value="$(arg fragment_timeout)"/>
      <param name="delay_between_messages" value="$(arg delay_between_messages)"/>
      <param name="max_message_size" value="$(arg max_message_size)"/>
      <param name="unregister_timeout" value="$(arg unregister_timeout)"/>

      <param name="topics_glob" value="$(arg topics_glob)"/>
      <param name="services_glob" value="$(arg services_glob)"/>
      <param name="params_glob" value="$(arg params_glob)"/>
    </node>
  </group>
  <group unless="$(arg ssl)">
    <node name="rosbridge_websocket" pkg="rosbridge_server" type="rosbridge_websocket" output="screen">
      <param name="authenticate" value="$(arg authenticate)" />
      <param name="port" value="$(arg port)"/>
      <param name="address" value="$(arg address)"/>
      <param name="retry_startup_delay" value="$(arg retry_startup_delay)"/>
      <param name="fragment_timeout" value="$(arg fragment_timeout)"/>
      <param name="delay_between_messages" value="$(arg delay_between_messages)"/>
      <param name="max_message_size" value="$(arg max_message_size)"/>
      <param name="unregister_timeout" value="$(arg unregister_timeout)"/>

      <param name="topics_glob" value="$(arg topics_glob)"/>
      <param name="services_glob" value="$(arg services_glob)"/>
      <param name="params_glob" value="$(arg params_glob)"/>

      <param name="bson_only_mode" value="$(arg bson_only_mode)"/>
    </node>
  </group>

  <node name="rosapi" pkg="rosapi" type="rosapi_node">
    <param name="topics_glob" value="$(arg topics_glob)"/>
    <param name="services_glob" value="$(arg services_glob)"/>
    <param name="params_glob" value="$(arg params_glob)"/>
  </node>
<!-- end of rosbridge setup -->

  <arg name="use_sim_time" default="true" />
  <arg name="gui" default="true" />
  <arg name="headless" default="false" />
  <arg name="world_name" default="$(find gazebo_radiation_plugins)/custom_models/reactor_room/updated_reactor_room2.world" />
  
  <arg name="use_map_topic" default="false"/>
  <arg name="scan_topic" default="front/scan" />

  <param name="use_sim_time" value="$(arg use_sim_time)"/>

  <!-- Short-term hack to support the original front_laser:=true argument for spawning
       the simulator. This will be removed in favour of using the config:=x arg instead. -->
  <arg name="front_laser" default="true" />
  <arg name="default_config" value="front_laser" if="$(arg front_laser)" />
  <arg name="default_config" value="base" unless="$(arg front_laser)" /> 
  <!-- end of hack -->

  <!--Load params -->
  <rosparam file="$(find gazebo_radiation_plugins)/custom_models/reactor_room/configs/attentuation.yaml" command="load"  />
  <rosparam file="$(find gazebo_radiation_plugins)/custom_models/reactor_room/configs/sensors.yaml" command="load"  />
  <rosparam file="$(find gazebo_radiation_plugins)/custom_models/reactor_room/configs/radiation.yaml" command="load"  />

  <!-- Launch Gazebo with the specified world -->

  <node name="gazebo" pkg="gazebo_radiation_plugins" type="gazebo"  output="screen"
  args="--verbose $(arg world_name)" />

  <!-- Configuration of Jackal which you would like to simulate.
       See jackal_description for details. -->
       <arg name="config" default="$(arg default_config)" />

  <!-- Load Jackal's description, controllers, and teleop nodes. -->
  <include file="$(find gazebo_radiation_plugins)/launch/custom_description.launch">
    <arg name="config" value="$(arg config)" />
  </include>
  <include file="$(find jackal_control)/launch/control.launch" />
  <include file="$(find jackal_control)/launch/teleop.launch">
    <arg name="joystick" value="false"/>
  </include>

  <!-- Spawn Jackal -->
  <node name="urdf_spawner" pkg="gazebo_ros" type="spawn_model" output="screen"
	      args="-urdf -model jackal -param robot_description -x -8.18256378174 -y -3.16091156006 -z 1.0" />

  <!-- Attach sensor to Jackal -->
  <node pkg="tf" type="static_transform_publisher" name="sim_sensor_to_robot" args="0 0 0 0 0 0 base_link sim_sensor 100"/>
  
  <!-- Map server -->
  <arg name="map_file" default="$(find gazebo_radiation_plugins)/maps/reactor_room_map.yaml"/>
  <node pkg="map_server" name="map_server" type="map_server" args="$(arg map_file)"/>
  
    <!--- Run AMCL -->
  <include file="$(find gazebo_radiation_plugins)/launch/amcl.launch">
    <arg name="use_map_topic" value="$(arg use_map_topic)" />
    <arg name="scan_topic"    value="$(arg scan_topic)" />
  </include>

  <!-- Run Move Base -->
  <include file="$(find gazebo_radiation_plugins)/launch/move_base.launch" />

  <include file="$(find gazebo_radiation_plugins)/launch/radmap.launch" />

  <!-- python gwendolen movebase scripts -->
  <node name="movebase_client_py" output="screen" pkg="simple_navigation_goals" type="simple_navigation_goals.py" />

  <!-- Run RVIZ -->
  <node name="rviz" pkg="rviz" type="rviz"  args="-d $(find gazebo_radiation_plugins)launch/rviz_config/husky_radiation_mapping.rviz"/>

</launch>
